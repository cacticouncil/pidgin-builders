environment:
  - REPO=pidgin/builders
  - REGISTRY_USERNAME
  - REGISTRY_PASSWORD
  - REGISTRY=docker.io

tasks:
  import:
    type: docker/import
    files: .:.

  build:
    type: docker/build
    dockerfile: Dockerfile.${TARGET}
    tag: ${REGISTRY}/${REPO}:${TARGET}
    files: .:.
    labels:
      - COMMIT=${HG_COMMIT}

  publish:
    type: docker/push
    image: ${REGISTRY}/${REPO}:${TARGET}

  login:
    type: docker/login
    username: ${REGISTRY_USERNAME}
    password: ${REGISTRY_PASSWORD}
    server: ${REGISTRY}

  logout:
    type: docker/logout
    server: ${REGISTRY}

  clean:
    type: docker/remove
    quiet: true
    images: ${REGISTRY}/${REPO}:${TARGET}

plans:
  appimage-x86_64:
    environment: TARGET=appimage-x86_64
    stages:
      - tasks: [import, build]

  clean:
    stages:
      - tasks: clean

  crossroad-mingw-w64:
    environment: TARGET=crossroad
    stages:
      - tasks: [import, build]

  debian-bullseye-amd64:
    environment: TARGET=debian-bullseye-amd64
    stages:
      - tasks: [import, build]
  debian-buster-amd64:
    environment: TARGET=debian-buster-amd64
    stages:
      - tasks: [import, build]

  mingw-w64-x86_64:
    environment: TARGET=mingw-w64-x86_64
    stages:
      - tasks: [import, build]

  subproject-build:
    environment: TARGET=subproject-build
    stages:
      - tasks: [import, build]

  subproject-build-clang:
    environment: TARGET=subproject-build-clang
    stages:
      - tasks: [import, build]

  ubuntu-focal-amd64:
    environment: TARGET=ubuntu-focal-amd64
    stages:
      - tasks: [import, build]

  build:
    stages:
      - tasks: [import, build]

  publish:
    environment: [REGISTRY_USERNAME, REGISTRY_PASSWORD]
    stages:
      - tasks: [login, publish]
      - tasks: [logout]
        run: always

  pvs-studio:
    environment: TARGET=pvs-studio
    stages:
      - tasks: [import, build]

  scanbuild:
    environment: TARGET=scanbuild
    stages:
      - tasks: [import, build]

